import time
import random
from Set3.P21_MT19937 import MT19937
from Set1.P2_Fixed_XOR import xor_byte_sequences


def mt19937_keystream(seed, length):
    """Generate a keystream of given length using MT19937 with a 16-bit seed."""
    rng = MT19937(seed)
    keystream = b"".join(rng.temper().to_bytes(4, "little") for _ in range((length // 4) + 1))  # Get only 4 bytes
    return keystream[:length]  # Truncate to exact length (may be 1 - 3 characters bigger since we take 4 at a time)


def mt19937_encrypt(plaintext, seed):
    """Encrypt using MT19937 stream cipher (XOR keystream with plaintext)."""
    keystream = mt19937_keystream(seed, len(plaintext))
    return xor_byte_sequences(plaintext, keystream)


def mt19937_decrypt(ciphertext, seed):
    """Decrypt using MT19937 stream cipher (XOR again restores original)."""
    return mt19937_encrypt(ciphertext, seed)


def brute_force_mt19937_seed(ciphertext, known_plaintext):
    """Brute-force the 16-bit seed by checking all possibilities."""
    for seed in range(2 ** 16):  # Try all 16-bit seeds
        decrypted = mt19937_decrypt(ciphertext, seed)
        if known_plaintext in decrypted:
            print(known_plaintext, "found in", decrypted)
            return seed  # Found correct seed
    return None


def generate_password_reset_token():
    """Generate a password reset token using MT19937 seeded with current time."""
    seed = int(time.time()) & 0xFFFF  # 16-bit seed from current timestamp
    return mt19937_keystream(seed, 16)  # Generate 16-byte token


def is_mt19937_token(token, time_window=600):
    """Check if a given token was generated by MT19937 seeded with a recent timestamp.
    Very similar to crack_mt19937_seed() """
    current_time = int(time.time()) & 0xFFFF
    for t in range(current_time - time_window, current_time + 1):
        if token == mt19937_keystream(t, 16):
            return True  # Token is valid
    return False


def main():
    # Test encryption/decryption
    seed = random.randint(0, 2 ** 16 - 1)
    plaintext = b"A" * 14  # Known plaintext attack
    random_prefix = bytes(random.randint(0, 255) for _ in range(random.randint(5, 20)))
    print("Random prefix:", random_prefix)
    ciphertext = mt19937_encrypt(random_prefix + plaintext, seed)

    # Recover the seed
    recovered_seed = brute_force_mt19937_seed(ciphertext, b"A" * 14)
    assert recovered_seed == seed, "Failed to recover the correct seed!"
    print(f"Recovered seed: {recovered_seed}")

    # Test password reset token
    reset_token = generate_password_reset_token()
    assert is_mt19937_token(reset_token), "Reset token validation failed!"
    print("Password reset token is valid.")


if __name__ == '__main__':
    main()
